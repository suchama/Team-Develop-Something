# logic
"""
サーバーからのリクエストを処理し、ゲームのロジック全体を管理
"""
from board import Board
from gamestate import GameState

class GameEngine:
    def handle_player_move(self, current_grid, current_turn, move_position):
        """
        プレイヤーの１手を処理する関数。
        入力:
            current_grid : 直前の盤面 (8x8 の 0/1/2 配列)
            current_turn : 現在の手番 (1:黒, 2:白)
            move_position: (x, y) 形式の打ち手座標
        出力:
            dict: {
              "status": "success" | "error",
              "message": str,
              "new_state": {
                  "board_grid": 8x8 配列,
                  "current_turn": 1|2,
                  "winner": 0|1|2|None,
                  "scores": {"black": int, "white": int}
              }
            }
        """
        # --- 1) 現在の状態を再現 ---
        board = Board()
        gamestate = GameState()

        # 盤面はディープコピーして安全に適用
        board.grid = [row[:] for row in current_grid]
        gamestate.current_turn = int(current_turn)

        # --- 2) 有効手判定 ---
        board.update_valid(gamestate.current_turn)
        valid_moves = board.get_valid(gamestate.current_turn)

        move_x, move_y = move_position  

        if (move_x, move_y) not in valid_moves:
            # 失敗: 盤面は変更しない
            black_count, white_count = board.count_piece()
            return {
                "status": "error",
                "message": "無効な手です。",
                "new_state": {
                    "board_grid": board.grid,
                    "current_turn": gamestate.current_turn,
                    "winner": None,
                    "scores": {"black": black_count, "white": white_count}
                }
            }

        # --- 3) 手の適用 ---
        board.reversi(move_x, move_y, gamestate.current_turn)
        gamestate.pass_reset() 

        # --- 4) 終局判定 or 手番交代 ---
        board.update_valid(1)
        board.update_valid(2)
        is_game_over = False

        if not board.get_valid(1) and not board.get_valid(2):
            is_game_over = True
        elif board.full_gameover():
            is_game_over = True

        if is_game_over:
            gamestate.count_winner(board)
        else:
            gamestate.swich_turn()

        # --- 5) 出力 ---
        black_count, white_count = board.count_piece()
        return {
            "status": "success",
            "message": "手が正常に処理されました。",
            "new_state": {
                "board_grid": board.grid,
                "current_turn": gamestate.current_turn,
                "winner": gamestate.winner,
                "scores": {"black": black_count, "white": white_count}
            }
        }
